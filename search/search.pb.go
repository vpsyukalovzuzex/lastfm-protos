// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: search/search.proto

package search

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchWithNameReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchWithNameReq) Reset() {
	*x = SearchWithNameReq{}
	mi := &file_search_search_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchWithNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWithNameReq) ProtoMessage() {}

func (x *SearchWithNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_search_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWithNameReq.ProtoReflect.Descriptor instead.
func (*SearchWithNameReq) Descriptor() ([]byte, []int) {
	return file_search_search_proto_rawDescGZIP(), []int{0}
}

func (x *SearchWithNameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SearchWithGenresReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Genres        []string               `protobuf:"bytes,1,rep,name=genres,proto3" json:"genres,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchWithGenresReq) Reset() {
	*x = SearchWithGenresReq{}
	mi := &file_search_search_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchWithGenresReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWithGenresReq) ProtoMessage() {}

func (x *SearchWithGenresReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_search_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWithGenresReq.ProtoReflect.Descriptor instead.
func (*SearchWithGenresReq) Descriptor() ([]byte, []int) {
	return file_search_search_proto_rawDescGZIP(), []int{1}
}

func (x *SearchWithGenresReq) GetGenres() []string {
	if x != nil {
		return x.Genres
	}
	return nil
}

type SearchAlbumsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Albums        []*AlbumsRes           `protobuf:"bytes,1,rep,name=albums,proto3" json:"albums,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchAlbumsRes) Reset() {
	*x = SearchAlbumsRes{}
	mi := &file_search_search_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchAlbumsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAlbumsRes) ProtoMessage() {}

func (x *SearchAlbumsRes) ProtoReflect() protoreflect.Message {
	mi := &file_search_search_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAlbumsRes.ProtoReflect.Descriptor instead.
func (*SearchAlbumsRes) Descriptor() ([]byte, []int) {
	return file_search_search_proto_rawDescGZIP(), []int{2}
}

func (x *SearchAlbumsRes) GetAlbums() []*AlbumsRes {
	if x != nil {
		return x.Albums
	}
	return nil
}

type AlbumsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Listeners     int32                  `protobuf:"varint,3,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,4,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlbumsRes) Reset() {
	*x = AlbumsRes{}
	mi := &file_search_search_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlbumsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumsRes) ProtoMessage() {}

func (x *AlbumsRes) ProtoReflect() protoreflect.Message {
	mi := &file_search_search_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumsRes.ProtoReflect.Descriptor instead.
func (*AlbumsRes) Descriptor() ([]byte, []int) {
	return file_search_search_proto_rawDescGZIP(), []int{3}
}

func (x *AlbumsRes) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AlbumsRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlbumsRes) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *AlbumsRes) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

func (x *AlbumsRes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AlbumsRes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type SearchArtistsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Artists       []*ArtistRes           `protobuf:"bytes,1,rep,name=artists,proto3" json:"artists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchArtistsRes) Reset() {
	*x = SearchArtistsRes{}
	mi := &file_search_search_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchArtistsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArtistsRes) ProtoMessage() {}

func (x *SearchArtistsRes) ProtoReflect() protoreflect.Message {
	mi := &file_search_search_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArtistsRes.ProtoReflect.Descriptor instead.
func (*SearchArtistsRes) Descriptor() ([]byte, []int) {
	return file_search_search_proto_rawDescGZIP(), []int{4}
}

func (x *SearchArtistsRes) GetArtists() []*ArtistRes {
	if x != nil {
		return x.Artists
	}
	return nil
}

type ArtistRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Listeners     int32                  `protobuf:"varint,3,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,4,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtistRes) Reset() {
	*x = ArtistRes{}
	mi := &file_search_search_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtistRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistRes) ProtoMessage() {}

func (x *ArtistRes) ProtoReflect() protoreflect.Message {
	mi := &file_search_search_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistRes.ProtoReflect.Descriptor instead.
func (*ArtistRes) Descriptor() ([]byte, []int) {
	return file_search_search_proto_rawDescGZIP(), []int{5}
}

func (x *ArtistRes) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ArtistRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArtistRes) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *ArtistRes) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

func (x *ArtistRes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ArtistRes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type SearchTracksRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tracks        []*TrackRes            `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchTracksRes) Reset() {
	*x = SearchTracksRes{}
	mi := &file_search_search_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchTracksRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTracksRes) ProtoMessage() {}

func (x *SearchTracksRes) ProtoReflect() protoreflect.Message {
	mi := &file_search_search_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTracksRes.ProtoReflect.Descriptor instead.
func (*SearchTracksRes) Descriptor() ([]byte, []int) {
	return file_search_search_proto_rawDescGZIP(), []int{6}
}

func (x *SearchTracksRes) GetTracks() []*TrackRes {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type TrackRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Duration      int32                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Listeners     int32                  `protobuf:"varint,4,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,5,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	AlbumID       int32                  `protobuf:"varint,6,opt,name=albumID,proto3" json:"albumID,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackRes) Reset() {
	*x = TrackRes{}
	mi := &file_search_search_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackRes) ProtoMessage() {}

func (x *TrackRes) ProtoReflect() protoreflect.Message {
	mi := &file_search_search_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackRes.ProtoReflect.Descriptor instead.
func (*TrackRes) Descriptor() ([]byte, []int) {
	return file_search_search_proto_rawDescGZIP(), []int{7}
}

func (x *TrackRes) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TrackRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrackRes) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TrackRes) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *TrackRes) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

func (x *TrackRes) GetAlbumID() int32 {
	if x != nil {
		return x.AlbumID
	}
	return 0
}

func (x *TrackRes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TrackRes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_search_search_proto protoreflect.FileDescriptor

var file_search_search_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x11, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x69, 0x74,
	0x68, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x73, 0x22, 0x3b, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x52, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x22,
	0xe3, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3e, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x52, 0x07, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3a, 0x0a, 0x0f, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x52,
	0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x32, 0xad, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x73, 0x57, 0x69, 0x74, 0x68, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x69, 0x74,
	0x68, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x32, 0xb2, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x15, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x57, 0x69, 0x74, 0x68, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x32, 0xb2, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x48, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x16, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x47, 0x65, 0x6e,
	0x72, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x57, 0x69, 0x74, 0x68, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x50, 0x6c, 0x61,
	0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x42, 0x16, 0x5a, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x66, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_search_search_proto_rawDescOnce sync.Once
	file_search_search_proto_rawDescData []byte
)

func file_search_search_proto_rawDescGZIP() []byte {
	file_search_search_proto_rawDescOnce.Do(func() {
		file_search_search_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_search_search_proto_rawDesc), len(file_search_search_proto_rawDesc)))
	})
	return file_search_search_proto_rawDescData
}

var file_search_search_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_search_search_proto_goTypes = []any{
	(*SearchWithNameReq)(nil),     // 0: proto.SearchWithNameReq
	(*SearchWithGenresReq)(nil),   // 1: proto.SearchWithGenresReq
	(*SearchAlbumsRes)(nil),       // 2: proto.SearchAlbumsRes
	(*AlbumsRes)(nil),             // 3: proto.AlbumsRes
	(*SearchArtistsRes)(nil),      // 4: proto.SearchArtistsRes
	(*ArtistRes)(nil),             // 5: proto.ArtistRes
	(*SearchTracksRes)(nil),       // 6: proto.SearchTracksRes
	(*TrackRes)(nil),              // 7: proto.TrackRes
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 9: google.protobuf.Empty
}
var file_search_search_proto_depIdxs = []int32{
	3,  // 0: proto.SearchAlbumsRes.albums:type_name -> proto.AlbumsRes
	8,  // 1: proto.AlbumsRes.created_at:type_name -> google.protobuf.Timestamp
	8,  // 2: proto.AlbumsRes.updated_at:type_name -> google.protobuf.Timestamp
	5,  // 3: proto.SearchArtistsRes.artists:type_name -> proto.ArtistRes
	8,  // 4: proto.ArtistRes.created_at:type_name -> google.protobuf.Timestamp
	8,  // 5: proto.ArtistRes.updated_at:type_name -> google.protobuf.Timestamp
	7,  // 6: proto.SearchTracksRes.tracks:type_name -> proto.TrackRes
	8,  // 7: proto.TrackRes.created_at:type_name -> google.protobuf.Timestamp
	8,  // 8: proto.TrackRes.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 9: proto.SearchAlbumsService.SearchAlbumsWithName:input_type -> proto.SearchWithNameReq
	1,  // 10: proto.SearchAlbumsService.SearchAlbumsWithGenres:input_type -> proto.SearchWithGenresReq
	0,  // 11: proto.SearchArtistsService.SearchArtistsWithName:input_type -> proto.SearchWithNameReq
	1,  // 12: proto.SearchArtistsService.SearchArtistsWithGenres:input_type -> proto.SearchWithGenresReq
	0,  // 13: proto.SearchTracksService.SearchTracksWithName:input_type -> proto.SearchWithNameReq
	1,  // 14: proto.SearchTracksService.SearchTracksWithGenres:input_type -> proto.SearchWithGenresReq
	9,  // 15: proto.SearchTracksService.ListenersChart:input_type -> google.protobuf.Empty
	9,  // 16: proto.SearchTracksService.PlaycountsChart:input_type -> google.protobuf.Empty
	2,  // 17: proto.SearchAlbumsService.SearchAlbumsWithName:output_type -> proto.SearchAlbumsRes
	2,  // 18: proto.SearchAlbumsService.SearchAlbumsWithGenres:output_type -> proto.SearchAlbumsRes
	4,  // 19: proto.SearchArtistsService.SearchArtistsWithName:output_type -> proto.SearchArtistsRes
	4,  // 20: proto.SearchArtistsService.SearchArtistsWithGenres:output_type -> proto.SearchArtistsRes
	6,  // 21: proto.SearchTracksService.SearchTracksWithName:output_type -> proto.SearchTracksRes
	6,  // 22: proto.SearchTracksService.SearchTracksWithGenres:output_type -> proto.SearchTracksRes
	6,  // 23: proto.SearchTracksService.ListenersChart:output_type -> proto.SearchTracksRes
	6,  // 24: proto.SearchTracksService.PlaycountsChart:output_type -> proto.SearchTracksRes
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_search_search_proto_init() }
func file_search_search_proto_init() {
	if File_search_search_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_search_search_proto_rawDesc), len(file_search_search_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_search_search_proto_goTypes,
		DependencyIndexes: file_search_search_proto_depIdxs,
		MessageInfos:      file_search_search_proto_msgTypes,
	}.Build()
	File_search_search_proto = out.File
	file_search_search_proto_goTypes = nil
	file_search_search_proto_depIdxs = nil
}
