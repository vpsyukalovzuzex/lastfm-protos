// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: upload/upload.proto

package upload

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateAlbumReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Listeners     int32                  `protobuf:"varint,2,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,3,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAlbumReq) Reset() {
	*x = CreateAlbumReq{}
	mi := &file_upload_upload_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAlbumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlbumReq) ProtoMessage() {}

func (x *CreateAlbumReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlbumReq.ProtoReflect.Descriptor instead.
func (*CreateAlbumReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAlbumReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAlbumReq) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *CreateAlbumReq) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

type CreateAlbumRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Listeners     int32                  `protobuf:"varint,3,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,4,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAlbumRes) Reset() {
	*x = CreateAlbumRes{}
	mi := &file_upload_upload_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAlbumRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlbumRes) ProtoMessage() {}

func (x *CreateAlbumRes) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlbumRes.ProtoReflect.Descriptor instead.
func (*CreateAlbumRes) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAlbumRes) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *CreateAlbumRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAlbumRes) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *CreateAlbumRes) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

func (x *CreateAlbumRes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateAlbumRes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateAlbumReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Listeners     int32                  `protobuf:"varint,3,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,4,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAlbumReq) Reset() {
	*x = UpdateAlbumReq{}
	mi := &file_upload_upload_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAlbumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlbumReq) ProtoMessage() {}

func (x *UpdateAlbumReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlbumReq.ProtoReflect.Descriptor instead.
func (*UpdateAlbumReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateAlbumReq) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateAlbumReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAlbumReq) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *UpdateAlbumReq) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

type UpdateAlbumRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Listeners     int32                  `protobuf:"varint,3,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,4,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAlbumRes) Reset() {
	*x = UpdateAlbumRes{}
	mi := &file_upload_upload_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAlbumRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlbumRes) ProtoMessage() {}

func (x *UpdateAlbumRes) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlbumRes.ProtoReflect.Descriptor instead.
func (*UpdateAlbumRes) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateAlbumRes) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateAlbumRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAlbumRes) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *UpdateAlbumRes) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

func (x *UpdateAlbumRes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UpdateAlbumRes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type DeleteAlbumReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAlbumReq) Reset() {
	*x = DeleteAlbumReq{}
	mi := &file_upload_upload_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAlbumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAlbumReq) ProtoMessage() {}

func (x *DeleteAlbumReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAlbumReq.ProtoReflect.Descriptor instead.
func (*DeleteAlbumReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteAlbumReq) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type AlbumsArtistsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AlbumID       int32                  `protobuf:"varint,1,opt,name=albumID,proto3" json:"albumID,omitempty"`
	ArtistID      int32                  `protobuf:"varint,2,opt,name=artistID,proto3" json:"artistID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlbumsArtistsReq) Reset() {
	*x = AlbumsArtistsReq{}
	mi := &file_upload_upload_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlbumsArtistsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumsArtistsReq) ProtoMessage() {}

func (x *AlbumsArtistsReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumsArtistsReq.ProtoReflect.Descriptor instead.
func (*AlbumsArtistsReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{5}
}

func (x *AlbumsArtistsReq) GetAlbumID() int32 {
	if x != nil {
		return x.AlbumID
	}
	return 0
}

func (x *AlbumsArtistsReq) GetArtistID() int32 {
	if x != nil {
		return x.ArtistID
	}
	return 0
}

type AlbumsGenresReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AlbumID       int32                  `protobuf:"varint,1,opt,name=albumID,proto3" json:"albumID,omitempty"`
	GenreID       int32                  `protobuf:"varint,2,opt,name=genreID,proto3" json:"genreID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlbumsGenresReq) Reset() {
	*x = AlbumsGenresReq{}
	mi := &file_upload_upload_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlbumsGenresReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumsGenresReq) ProtoMessage() {}

func (x *AlbumsGenresReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumsGenresReq.ProtoReflect.Descriptor instead.
func (*AlbumsGenresReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{6}
}

func (x *AlbumsGenresReq) GetAlbumID() int32 {
	if x != nil {
		return x.AlbumID
	}
	return 0
}

func (x *AlbumsGenresReq) GetGenreID() int32 {
	if x != nil {
		return x.GenreID
	}
	return 0
}

type CreateArtistReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Listeners     int32                  `protobuf:"varint,2,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,3,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateArtistReq) Reset() {
	*x = CreateArtistReq{}
	mi := &file_upload_upload_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateArtistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArtistReq) ProtoMessage() {}

func (x *CreateArtistReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArtistReq.ProtoReflect.Descriptor instead.
func (*CreateArtistReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{7}
}

func (x *CreateArtistReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateArtistReq) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *CreateArtistReq) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

type CreateArtistRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Listeners     int32                  `protobuf:"varint,3,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,4,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateArtistRes) Reset() {
	*x = CreateArtistRes{}
	mi := &file_upload_upload_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateArtistRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArtistRes) ProtoMessage() {}

func (x *CreateArtistRes) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArtistRes.ProtoReflect.Descriptor instead.
func (*CreateArtistRes) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{8}
}

func (x *CreateArtistRes) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *CreateArtistRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateArtistRes) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *CreateArtistRes) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

func (x *CreateArtistRes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateArtistRes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateArtistReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Listeners     int32                  `protobuf:"varint,3,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,4,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateArtistReq) Reset() {
	*x = UpdateArtistReq{}
	mi := &file_upload_upload_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateArtistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArtistReq) ProtoMessage() {}

func (x *UpdateArtistReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArtistReq.ProtoReflect.Descriptor instead.
func (*UpdateArtistReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateArtistReq) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateArtistReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateArtistReq) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *UpdateArtistReq) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

type UpdateArtistRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Listeners     int32                  `protobuf:"varint,3,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,4,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateArtistRes) Reset() {
	*x = UpdateArtistRes{}
	mi := &file_upload_upload_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateArtistRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArtistRes) ProtoMessage() {}

func (x *UpdateArtistRes) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArtistRes.ProtoReflect.Descriptor instead.
func (*UpdateArtistRes) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateArtistRes) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateArtistRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateArtistRes) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *UpdateArtistRes) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

func (x *UpdateArtistRes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UpdateArtistRes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type DeleteArtistReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteArtistReq) Reset() {
	*x = DeleteArtistReq{}
	mi := &file_upload_upload_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteArtistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArtistReq) ProtoMessage() {}

func (x *DeleteArtistReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArtistReq.ProtoReflect.Descriptor instead.
func (*DeleteArtistReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteArtistReq) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ArtistsTracksReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArtistID      int32                  `protobuf:"varint,1,opt,name=artistID,proto3" json:"artistID,omitempty"`
	TrackID       int32                  `protobuf:"varint,2,opt,name=trackID,proto3" json:"trackID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtistsTracksReq) Reset() {
	*x = ArtistsTracksReq{}
	mi := &file_upload_upload_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtistsTracksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistsTracksReq) ProtoMessage() {}

func (x *ArtistsTracksReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistsTracksReq.ProtoReflect.Descriptor instead.
func (*ArtistsTracksReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{12}
}

func (x *ArtistsTracksReq) GetArtistID() int32 {
	if x != nil {
		return x.ArtistID
	}
	return 0
}

func (x *ArtistsTracksReq) GetTrackID() int32 {
	if x != nil {
		return x.TrackID
	}
	return 0
}

type ArtistsGenresReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArtistID      int32                  `protobuf:"varint,1,opt,name=artistID,proto3" json:"artistID,omitempty"`
	GenreID       int32                  `protobuf:"varint,2,opt,name=genreID,proto3" json:"genreID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtistsGenresReq) Reset() {
	*x = ArtistsGenresReq{}
	mi := &file_upload_upload_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtistsGenresReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistsGenresReq) ProtoMessage() {}

func (x *ArtistsGenresReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistsGenresReq.ProtoReflect.Descriptor instead.
func (*ArtistsGenresReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{13}
}

func (x *ArtistsGenresReq) GetArtistID() int32 {
	if x != nil {
		return x.ArtistID
	}
	return 0
}

func (x *ArtistsGenresReq) GetGenreID() int32 {
	if x != nil {
		return x.GenreID
	}
	return 0
}

type CreateGenreReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateGenreReq) Reset() {
	*x = CreateGenreReq{}
	mi := &file_upload_upload_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGenreReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGenreReq) ProtoMessage() {}

func (x *CreateGenreReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGenreReq.ProtoReflect.Descriptor instead.
func (*CreateGenreReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{14}
}

func (x *CreateGenreReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateGenreRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateGenreRes) Reset() {
	*x = CreateGenreRes{}
	mi := &file_upload_upload_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGenreRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGenreRes) ProtoMessage() {}

func (x *CreateGenreRes) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGenreRes.ProtoReflect.Descriptor instead.
func (*CreateGenreRes) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{15}
}

func (x *CreateGenreRes) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *CreateGenreRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGenreRes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateGenreRes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateTrackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Duration      int32                  `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Listeners     int32                  `protobuf:"varint,3,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,4,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	AlbumID       int32                  `protobuf:"varint,5,opt,name=albumID,proto3" json:"albumID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTrackReq) Reset() {
	*x = CreateTrackReq{}
	mi := &file_upload_upload_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTrackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrackReq) ProtoMessage() {}

func (x *CreateTrackReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrackReq.ProtoReflect.Descriptor instead.
func (*CreateTrackReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{16}
}

func (x *CreateTrackReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTrackReq) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CreateTrackReq) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *CreateTrackReq) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

func (x *CreateTrackReq) GetAlbumID() int32 {
	if x != nil {
		return x.AlbumID
	}
	return 0
}

type CreateTrackRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Duration      int32                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Listeners     int32                  `protobuf:"varint,4,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,5,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	AlbumID       int32                  `protobuf:"varint,6,opt,name=albumID,proto3" json:"albumID,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTrackRes) Reset() {
	*x = CreateTrackRes{}
	mi := &file_upload_upload_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTrackRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrackRes) ProtoMessage() {}

func (x *CreateTrackRes) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrackRes.ProtoReflect.Descriptor instead.
func (*CreateTrackRes) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{17}
}

func (x *CreateTrackRes) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *CreateTrackRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTrackRes) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CreateTrackRes) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *CreateTrackRes) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

func (x *CreateTrackRes) GetAlbumID() int32 {
	if x != nil {
		return x.AlbumID
	}
	return 0
}

func (x *CreateTrackRes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateTrackRes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateTrackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Duration      int32                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Listeners     int32                  `protobuf:"varint,4,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,5,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	AlbumID       int32                  `protobuf:"varint,6,opt,name=albumID,proto3" json:"albumID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTrackReq) Reset() {
	*x = UpdateTrackReq{}
	mi := &file_upload_upload_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTrackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTrackReq) ProtoMessage() {}

func (x *UpdateTrackReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTrackReq.ProtoReflect.Descriptor instead.
func (*UpdateTrackReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateTrackReq) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateTrackReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTrackReq) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UpdateTrackReq) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *UpdateTrackReq) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

func (x *UpdateTrackReq) GetAlbumID() int32 {
	if x != nil {
		return x.AlbumID
	}
	return 0
}

type UpdateTrackRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Duration      int32                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Listeners     int32                  `protobuf:"varint,4,opt,name=listeners,proto3" json:"listeners,omitempty"`
	Playcounts    int32                  `protobuf:"varint,5,opt,name=playcounts,proto3" json:"playcounts,omitempty"`
	AlbumID       int32                  `protobuf:"varint,6,opt,name=albumID,proto3" json:"albumID,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTrackRes) Reset() {
	*x = UpdateTrackRes{}
	mi := &file_upload_upload_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTrackRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTrackRes) ProtoMessage() {}

func (x *UpdateTrackRes) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTrackRes.ProtoReflect.Descriptor instead.
func (*UpdateTrackRes) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateTrackRes) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateTrackRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTrackRes) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UpdateTrackRes) GetListeners() int32 {
	if x != nil {
		return x.Listeners
	}
	return 0
}

func (x *UpdateTrackRes) GetPlaycounts() int32 {
	if x != nil {
		return x.Playcounts
	}
	return 0
}

func (x *UpdateTrackRes) GetAlbumID() int32 {
	if x != nil {
		return x.AlbumID
	}
	return 0
}

func (x *UpdateTrackRes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UpdateTrackRes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type DeleteTrackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTrackReq) Reset() {
	*x = DeleteTrackReq{}
	mi := &file_upload_upload_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTrackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTrackReq) ProtoMessage() {}

func (x *DeleteTrackReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTrackReq.ProtoReflect.Descriptor instead.
func (*DeleteTrackReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteTrackReq) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type TracksGenresReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackID       int32                  `protobuf:"varint,1,opt,name=trackID,proto3" json:"trackID,omitempty"`
	GenreID       int32                  `protobuf:"varint,2,opt,name=genreID,proto3" json:"genreID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracksGenresReq) Reset() {
	*x = TracksGenresReq{}
	mi := &file_upload_upload_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracksGenresReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracksGenresReq) ProtoMessage() {}

func (x *TracksGenresReq) ProtoReflect() protoreflect.Message {
	mi := &file_upload_upload_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracksGenresReq.ProtoReflect.Descriptor instead.
func (*TracksGenresReq) Descriptor() ([]byte, []int) {
	return file_upload_upload_proto_rawDescGZIP(), []int{21}
}

func (x *TracksGenresReq) GetTrackID() int32 {
	if x != nil {
		return x.TrackID
	}
	return 0
}

func (x *TracksGenresReq) GetGenreID() int32 {
	if x != nil {
		return x.GenreID
	}
	return 0
}

var File_upload_upload_proto protoreflect.FileDescriptor

var file_upload_upload_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xe8,
	0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x72, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xe8, 0x01,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x20, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x22, 0x48, 0x0a, 0x10, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x73, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x49, 0x44, 0x22, 0x45, 0x0a, 0x0f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x47, 0x65,
	0x6e, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x44, 0x22, 0x63, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x22, 0xe9, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x73, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x22, 0xe9, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x21, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x48, 0x0a, 0x10, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x22, 0x48, 0x0a, 0x10, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x73, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x49, 0x44, 0x22, 0x24, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65,
	0x6e, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x62, 0x75,
	0x6d, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x49, 0x44, 0x22, 0x9e, 0x02, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x22, 0x9e,
	0x02, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x20, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x44, 0x22, 0x45, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x47, 0x65, 0x6e, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x44, 0x32, 0xd4, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x6f,
	0x41, 0x6c, 0x62, 0x75, 0x6d, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x12,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x47, 0x65,
	0x6e, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32,
	0xdf, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x6f,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x10,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65,
	0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73,
	0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x32, 0x51, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65, 0x6e, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x32, 0x8f, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x16, 0x5a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x6d,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_upload_upload_proto_rawDescOnce sync.Once
	file_upload_upload_proto_rawDescData []byte
)

func file_upload_upload_proto_rawDescGZIP() []byte {
	file_upload_upload_proto_rawDescOnce.Do(func() {
		file_upload_upload_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_upload_upload_proto_rawDesc), len(file_upload_upload_proto_rawDesc)))
	})
	return file_upload_upload_proto_rawDescData
}

var file_upload_upload_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_upload_upload_proto_goTypes = []any{
	(*CreateAlbumReq)(nil),        // 0: proto.CreateAlbumReq
	(*CreateAlbumRes)(nil),        // 1: proto.CreateAlbumRes
	(*UpdateAlbumReq)(nil),        // 2: proto.UpdateAlbumReq
	(*UpdateAlbumRes)(nil),        // 3: proto.UpdateAlbumRes
	(*DeleteAlbumReq)(nil),        // 4: proto.DeleteAlbumReq
	(*AlbumsArtistsReq)(nil),      // 5: proto.AlbumsArtistsReq
	(*AlbumsGenresReq)(nil),       // 6: proto.AlbumsGenresReq
	(*CreateArtistReq)(nil),       // 7: proto.CreateArtistReq
	(*CreateArtistRes)(nil),       // 8: proto.CreateArtistRes
	(*UpdateArtistReq)(nil),       // 9: proto.UpdateArtistReq
	(*UpdateArtistRes)(nil),       // 10: proto.UpdateArtistRes
	(*DeleteArtistReq)(nil),       // 11: proto.DeleteArtistReq
	(*ArtistsTracksReq)(nil),      // 12: proto.ArtistsTracksReq
	(*ArtistsGenresReq)(nil),      // 13: proto.ArtistsGenresReq
	(*CreateGenreReq)(nil),        // 14: proto.CreateGenreReq
	(*CreateGenreRes)(nil),        // 15: proto.CreateGenreRes
	(*CreateTrackReq)(nil),        // 16: proto.CreateTrackReq
	(*CreateTrackRes)(nil),        // 17: proto.CreateTrackRes
	(*UpdateTrackReq)(nil),        // 18: proto.UpdateTrackReq
	(*UpdateTrackRes)(nil),        // 19: proto.UpdateTrackRes
	(*DeleteTrackReq)(nil),        // 20: proto.DeleteTrackReq
	(*TracksGenresReq)(nil),       // 21: proto.TracksGenresReq
	(*timestamppb.Timestamp)(nil), // 22: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 23: google.protobuf.Empty
}
var file_upload_upload_proto_depIdxs = []int32{
	22, // 0: proto.CreateAlbumRes.created_at:type_name -> google.protobuf.Timestamp
	22, // 1: proto.CreateAlbumRes.updated_at:type_name -> google.protobuf.Timestamp
	22, // 2: proto.UpdateAlbumRes.created_at:type_name -> google.protobuf.Timestamp
	22, // 3: proto.UpdateAlbumRes.updated_at:type_name -> google.protobuf.Timestamp
	22, // 4: proto.CreateArtistRes.created_at:type_name -> google.protobuf.Timestamp
	22, // 5: proto.CreateArtistRes.updated_at:type_name -> google.protobuf.Timestamp
	22, // 6: proto.UpdateArtistRes.created_at:type_name -> google.protobuf.Timestamp
	22, // 7: proto.UpdateArtistRes.updated_at:type_name -> google.protobuf.Timestamp
	22, // 8: proto.CreateGenreRes.created_at:type_name -> google.protobuf.Timestamp
	22, // 9: proto.CreateGenreRes.updated_at:type_name -> google.protobuf.Timestamp
	22, // 10: proto.CreateTrackRes.created_at:type_name -> google.protobuf.Timestamp
	22, // 11: proto.CreateTrackRes.updated_at:type_name -> google.protobuf.Timestamp
	22, // 12: proto.UpdateTrackRes.created_at:type_name -> google.protobuf.Timestamp
	22, // 13: proto.UpdateTrackRes.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 14: proto.UploadAlbumService.CreateAlbum:input_type -> proto.CreateAlbumReq
	2,  // 15: proto.UploadAlbumService.UpdateAlbum:input_type -> proto.UpdateAlbumReq
	4,  // 16: proto.UploadAlbumService.DeleteAlbum:input_type -> proto.DeleteAlbumReq
	5,  // 17: proto.UploadAlbumService.AddToAlbumArtist:input_type -> proto.AlbumsArtistsReq
	6,  // 18: proto.UploadAlbumService.AddToAlbumGenre:input_type -> proto.AlbumsGenresReq
	7,  // 19: proto.UploadArtistService.CreateArtist:input_type -> proto.CreateArtistReq
	9,  // 20: proto.UploadArtistService.UpdateArtist:input_type -> proto.UpdateArtistReq
	11, // 21: proto.UploadArtistService.DeleteArtist:input_type -> proto.DeleteArtistReq
	12, // 22: proto.UploadArtistService.AddToArtistTrack:input_type -> proto.ArtistsTracksReq
	13, // 23: proto.UploadArtistService.AddToArtistGenre:input_type -> proto.ArtistsGenresReq
	14, // 24: proto.UploadGenreService.CreateGenre:input_type -> proto.CreateGenreReq
	16, // 25: proto.UploadTrackService.CreateTrack:input_type -> proto.CreateTrackReq
	18, // 26: proto.UploadTrackService.UpdateTrack:input_type -> proto.UpdateTrackReq
	20, // 27: proto.UploadTrackService.DeleteTrack:input_type -> proto.DeleteTrackReq
	21, // 28: proto.UploadTrackService.AddToTrackGenre:input_type -> proto.TracksGenresReq
	1,  // 29: proto.UploadAlbumService.CreateAlbum:output_type -> proto.CreateAlbumRes
	3,  // 30: proto.UploadAlbumService.UpdateAlbum:output_type -> proto.UpdateAlbumRes
	23, // 31: proto.UploadAlbumService.DeleteAlbum:output_type -> google.protobuf.Empty
	23, // 32: proto.UploadAlbumService.AddToAlbumArtist:output_type -> google.protobuf.Empty
	23, // 33: proto.UploadAlbumService.AddToAlbumGenre:output_type -> google.protobuf.Empty
	8,  // 34: proto.UploadArtistService.CreateArtist:output_type -> proto.CreateArtistRes
	10, // 35: proto.UploadArtistService.UpdateArtist:output_type -> proto.UpdateArtistRes
	23, // 36: proto.UploadArtistService.DeleteArtist:output_type -> google.protobuf.Empty
	23, // 37: proto.UploadArtistService.AddToArtistTrack:output_type -> google.protobuf.Empty
	23, // 38: proto.UploadArtistService.AddToArtistGenre:output_type -> google.protobuf.Empty
	15, // 39: proto.UploadGenreService.CreateGenre:output_type -> proto.CreateGenreRes
	17, // 40: proto.UploadTrackService.CreateTrack:output_type -> proto.CreateTrackRes
	19, // 41: proto.UploadTrackService.UpdateTrack:output_type -> proto.UpdateTrackRes
	23, // 42: proto.UploadTrackService.DeleteTrack:output_type -> google.protobuf.Empty
	23, // 43: proto.UploadTrackService.AddToTrackGenre:output_type -> google.protobuf.Empty
	29, // [29:44] is the sub-list for method output_type
	14, // [14:29] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_upload_upload_proto_init() }
func file_upload_upload_proto_init() {
	if File_upload_upload_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_upload_upload_proto_rawDesc), len(file_upload_upload_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_upload_upload_proto_goTypes,
		DependencyIndexes: file_upload_upload_proto_depIdxs,
		MessageInfos:      file_upload_upload_proto_msgTypes,
	}.Build()
	File_upload_upload_proto = out.File
	file_upload_upload_proto_goTypes = nil
	file_upload_upload_proto_depIdxs = nil
}
